package com.example.app.mapper;

import com.example.app.dto.InteractionResponse;
import com.example.app.dto.ReactionCount;
import com.example.app.dto.SignalsResponse;
import com.example.domain.model.InteractionNote;
import com.example.domain.model.SignalResponse;
import java.lang.reflect.Method;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import org.springframework.stereotype.Component;

@Component
public class ApiMapper {
  public InteractionResponse toInteractionResponse(InteractionNote note) {
    if (note == null) return null;
    String drugA = null;
    String drugB = null;
    String msg = null;
    Instant ts = null;
    try {
      // InteractionNote is a record: pair() returns DrugPair which has drugA()/drugB()
      Method pairMethod = note.getClass().getMethod("pair");
      Object pair = pairMethod.invoke(note);
      Method drugAMethod = pair.getClass().getMethod("drugA");
      Method drugBMethod = pair.getClass().getMethod("drugB");
      drugA = (String) drugAMethod.invoke(pair);
      drugB = (String) drugBMethod.invoke(pair);
      Method noteMethod = note.getClass().getMethod("note");
      msg = (String) noteMethod.invoke(note);
      Method updatedAt = note.getClass().getMethod("updatedAt");
      Object updated = updatedAt.invoke(note);
      if (updated instanceof Instant) ts = (Instant) updated;
    } catch (Exception e) {
      // fallback to nulls if reflection fails
    }
    if (ts == null) ts = Instant.now();
    return new InteractionResponse(drugA, drugB, msg, ts);
  }

  public SignalsResponse toSignalsResponse(SignalResponse src) {
    if (src == null) return null;
    try {
      // use reflection to access fields/methods generated by Lombok
      Method getDrugAMethod = src.getClass().getMethod("getDrugA");
      Method getDrugBMethod = src.getClass().getMethod("getDrugB");
      Object drugAObj = getDrugAMethod.invoke(src);
      Object drugBObj = getDrugBMethod.invoke(src);
      String drugA = drugAObj != null ? drugAObj.toString() : null;
      String drugB = drugBObj != null ? drugBObj.toString() : null;

      // events may be a List of domain AdverseEvent with getters getEffect/getCount
      Method getEventsMethod = null;
      try {
        getEventsMethod = src.getClass().getMethod("getEvents");
      } catch (NoSuchMethodException ignore) {
        // older naming? try events()
        try {
          getEventsMethod = src.getClass().getMethod("events");
        } catch (NoSuchMethodException ignored) {
        }
      }

      if (getEventsMethod == null) {
        return new SignalsResponse(drugA, drugB, 0L, Collections.emptyList());
      }

      Object eventsObj = getEventsMethod.invoke(src);
      if (eventsObj == null) {
        return new SignalsResponse(drugA, drugB, 0L, Collections.emptyList());
      }

      @SuppressWarnings("unchecked")
      List<Object> events = (List<Object>) eventsObj;
      List<ReactionCount> top = new ArrayList<>();
      long total = 0L;
      for (Object e : events) {
        try {
          Method getEffect = null;
          Method getCount = null;
          try {
            getEffect = e.getClass().getMethod("getEffect");
            getCount = e.getClass().getMethod("getCount");
          } catch (NoSuchMethodException nm) {
            // try alternative names
            try {
              getEffect = e.getClass().getMethod("effect");
              getCount = e.getClass().getMethod("count");
            } catch (NoSuchMethodException ignored) {
            }
          }
          String effect = getEffect != null ? (String) getEffect.invoke(e) : null;
          Object cntObj = getCount != null ? getCount.invoke(e) : null;
          int cnt = 0;
          if (cntObj instanceof Integer) cnt = (Integer) cntObj;
          else if (cntObj instanceof Long) cnt = ((Long) cntObj).intValue();
          total += cnt;
          top.add(new ReactionCount(effect, cnt));
        } catch (Exception ex) {
          // skip problematic event
        }
      }

      return new SignalsResponse(drugA, drugB, total, top);
    } catch (Exception ex) {
      return new SignalsResponse(null, null, 0L, Collections.emptyList());
    }
  }
}
